# 説明書

## 概要

このプロジェクトは、PHP + MySQL + Nginx を使用したシンプルな掲示板（BBS）アプリケーションです。テキスト投稿と画像アップロード機能を備えており、Docker Composeで環境構築を行います。

## システム構成

### アーキテクチャ
- **Webサーバー**: Nginx（リバースプロキシ・静的ファイル配信）
- **アプリケーションサーバー**: PHP 8.4 FPM
- **データベース**: MySQL 8.4
- **コンテナオーケストレーション**: Docker Compose

### システム構成図
```
[ブラウザ] ←→ [Nginx:80] ←→ [PHP-FPM:9000] ←→ [MySQL:3306]
                   ↓
              [静的ファイル]
              [アップロード画像]
```

## 主な機能

### 1. テキスト投稿機能
- HTMLフォームによるテキスト投稿
- 改行の自動変換（nl2br）
- XSS対策のHTMLエスケープ処理

### 2. 画像アップロード機能
- 画像ファイルの選択・アップロード
- ファイル形式の検証（MIMEタイプチェック）
- ファイルサイズ制限（最大5MB）
- 重複防止のファイル名自動生成

### 3. 投稿一覧表示機能
- データベースからの投稿取得
- 新しい投稿順での表示
- 画像の自動表示（最大高さ10em）

### 4. セキュリティ機能
- SQLインジェクション対策（プリペアドステートメント）
- XSS対策（htmlspecialchars）
- ファイルアップロード攻撃対策
- POST-Redirect-GET パターンの実装

## 技術仕様

### Dockerコンテナ構成

#### PHPコンテナ（php2）
- **ベースイメージ**: php:8.4-fpm-alpine
- **追加拡張機能**: 
  - curl: HTTP通信機能
  - pdo_mysql: MySQLデータベース接続
- **アップロード設定**:
  - post_max_size: 5MB
  - upload_max_filesize: 5MB
- **ファイル権限**: www-data ユーザーでの画像ディレクトリ作成

#### Nginxコンテナ（web）
- **ベースイメージ**: nginx:latest
- **ポート設定**: ホスト80番ポートで公開
- **リクエスト制限**: client_max_body_size 6MB
- **ドキュメントルート**: /var/www/public
- **PHP連携**: FastCGI経由でPHPコンテナと通信

#### MySQLコンテナ（mysql2）
- **ベースイメージ**: mysql:8.4
- **データベース**: database
- **認証設定**: rootユーザー、パスワードなし
- **文字セット**: UTF8MB4（絵文字対応）
- **タイムゾーン**: Asia/Tokyo
- **パケットサイズ**: 最大5MB

### データベーススキーマ

#### bbs_entries テーブル
| カラム名 | データ型 | 制約 | 説明 |
|---------|---------|------|------|
| id | INT | PRIMARY KEY, AUTO_INCREMENT | 投稿ID |
| body | TEXT | NOT NULL | 投稿内容 |
| image_filename | VARCHAR(255) | NULL | 画像ファイル名 |
| created_at | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP | 投稿日時 |

### ファイル構成

```
project/
├── Dockerfile              # PHPコンテナのカスタマイズ
├── compose.yml             # Docker Compose設定
├── nginx/
│   └── conf.d/
│       └── default.conf    # Nginx仮想ホスト設定
└── public/
    └── keijiban.php        # メインアプリケーション
```

### Dockerボリューム構成

- **mysql**: MySQLデータの永続化
- **image**: アップロード画像の永続化（コンテナ間共有）

## アプリケーションロジック

### 投稿処理フロー
1. POSTリクエストの受信
2. 画像ファイルの検証・処理
3. データベースへの投稿情報挿入
4. リダイレクト実行（PRGパターン）

### 画像処理ロジック
1. ファイルアップロードの確認
2. MIMEタイプによる画像判定
3. 一意なファイル名の生成（時刻 + 乱数）
4. 指定ディレクトリへの保存
5. データベースへのファイル名記録

### セキュリティ対策

#### SQLインジェクション対策
- PDOプリペアドステートメントの使用
- パラメータバインディング

#### XSS対策
- htmlspecialchars()による出力エスケープ
- ENT_QUOTESフラグによる完全なエスケープ

#### ファイルアップロード攻撃対策
- MIMEタイプの厳密なチェック
- ファイルサイズ制限
- 実行可能ファイルの排除
- アップロード先ディレクトリの分離
